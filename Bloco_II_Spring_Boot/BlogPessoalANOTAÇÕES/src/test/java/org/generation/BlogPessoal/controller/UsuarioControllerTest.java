package org.generation.BlogPessoal.controller;
//annotation
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.Optional;

import org.generation.BlogPessoal.Model.Usuario;
import org.generation.BlogPessoal.Service.UsuarioService;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestMethodOrder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class UsuarioControllerTest {

	@Autowired
	private TestRestTemplate testRestTemplate;

	@Autowired
	private UsuarioService usuarioService;

	@Test
	@Order(1)//indica que o metodo ser√° o primeiro a ser executado
	@DisplayName("Cadastrar Um Usu√°rio")//configura mesnagem que ser√° exibida ao inves do nome do metodo
	public void deveCriarUmUsuario() {
		
		//recebdno um objeto classe usuario, equivalente a requisi√ß√£o POST
		HttpEntity<Usuario> requisicao = new HttpEntity<Usuario>(new Usuario(0L, "Paulo Antunes", "paulo_antunes@email.com.br", "13465278"));
		
		/* a Requisi√ß√£o HTTP ser√° enviada atrav√©s do m√©todo exchange() da Classe
		TestRestTemplate e a Resposta da Requisi√ß√£o (Response) ser√° recebida pelo objeto
		resposta do tipo responseentity
		
		PARA ENVIAR A REQUISI√á√ÉO, SER√Å NECESS√ÅRIO PASSAR 4 PARAMETROS:
		 * A URI: Endere√ßo do endpoint (/usuarios/cadastrar);
		 * O M√©todo HTTP: Neste exemplo o m√©todo POST;
		 * O Objeto HttpEntity: neste exemplo o objeto requisi√ß√£o, que contem o objeto da classe usuario
		 * O conte√∫do esperado no Corpo da Resposta (Response Body): Neste exemplo ser√° do tipo usuario (usuario.class)
		 */ 
		
		ResponseEntity<Usuario> resposta = testRestTemplate
			.exchange("/usuarios/cadastrar", HttpMethod.POST, requisicao, Usuario.class);

		//checaremos se a resposta da requisi√ß√£o (Response), √© a resposta esperada (CREATED -->201)
		assertEquals(HttpStatus.CREATED, resposta.getStatusCode());
		assertEquals(requisicao.getBody().getNomeCompleto(), resposta.getBody().getNomeCompleto());
		assertEquals(requisicao.getBody().getUsuario(), resposta.getBody().getUsuario());
	}

	@Test
	@Order(2)
	@DisplayName("N√£o deve permitir duplica√ß√£o do Usu√°rio")
	public void naoDeveDuplicarUsuario() {
		//VAMOS TESTAR O ERRO

		usuarioService.cadastrarUsuario(new Usuario(0L, 
			"Maria da Silva", "maria_silva@email.com.br", "13465278"));

		HttpEntity<Usuario> requisicao = new HttpEntity<Usuario>(new Usuario(0L, 
			"Maria da Silva", "maria_silva@email.com.br", "13465278"));

		ResponseEntity<Usuario> resposta = testRestTemplate
			.exchange("/usuarios/cadastrar", HttpMethod.POST, requisicao, Usuario.class);
		//checaremos se a resposta da requisi√ß√£o (Response), √© a resposta esperada (BAD_REQUEST -->400)
		assertEquals(HttpStatus.BAD_REQUEST, resposta.getStatusCode());
	}

	/* a Requisi√ß√£o HTTP ser√° enviada atrav√©s do m√©todo exchange() da Classe
	TestRestTemplate e a Resposta da Requisi√ß√£o (Response) ser√° recebida pelo objeto
	resposta do  tipo ResponseEntity. Para enviar a requisi√ß√£o, ser√° necess√°rio passar por 4 parametros
	  
	 		*A URI: Endere√ßo do endpoint (/usuarios/atualizar);
			*O M√©todo HTTP: Neste exemplo o m√©todo PUT;
			*O Objeto o HttpEntity: neste exemplo o objeto requisi√ß√£o, que contem o objeto da classe usuario
	  		*O conte√∫do esperado no Corpo da Resposta (Response Body): Neste exemplo ser√° do tipo usuario (usuario.class)
	 */
			
			
			
			
	@Test
	@Order(3)
	@DisplayName("Alterar um Usu√°rio")
	public void deveAtualizarUmUsuario() {

		Optional<Usuario> usuarioCreate = usuarioService.cadastrarUsuario(new Usuario(0L, 
			"Juliana Andrews", "juliana_andrews@email.com.br", "juliana123"));
		//recebdno um objeto classe usuario, equivalente a requisi√ß√£o PUT
		Usuario usuarioUpdate = new Usuario(usuarioCreate.get().getId(), "Juliana Andrews Ramos", "juliana_ramos@email.com.br", "juliana123");
		
		HttpEntity<Usuario> requisicao = new HttpEntity<Usuario>(usuarioUpdate);

		
		ResponseEntity<Usuario> resposta = testRestTemplate
				//Spring Security habilitado com autentica√ß√£o do tipo Http Basic, o objeto testRestTemplate dos endpoints, exigem autentica√ß√£o
				//para autenticar o usuario, usa o metodo withBasicAuth(user,password)
			.withBasicAuth("root", "root")
			.exchange("/usuarios/atualizar", HttpMethod.PUT, requisicao, Usuario.class); 
		//a resposta esperada (OK ü°™ 200)
		assertEquals(HttpStatus.OK, resposta.getStatusCode());
		assertEquals(usuarioUpdate.getNomeCompleto(), resposta.getBody().getNomeCompleto());
		assertEquals(usuarioUpdate.getUsuario(), resposta.getBody().getUsuario());
	}

	@Test
	@Order(4)
	@DisplayName("Listar todos os Usu√°rios")
	public void deveMostrarTodosUsuarios() {
		/* Para enviar a requisi√ß√£o, o ser√° necess√°rio passar 4	par√¢metros:
			*A URI: Endere√ßo do endpoint (/usuarios/all);
			*O M√©todo HTTP: Neste exemplo o m√©todo GET;
			*O Objeto HttpEntity: o objeto ser√° null. Requisi√ß√µes do tipo GET nao enviam objeto no corpo da requisi√ß√£o
			*O conte√∫do esperado no Corpo da Resposta (Response Body): 
			*/
		usuarioService.cadastrarUsuario(new Usuario(0L,"Sabrina Sanches", "sabrina_sanches@email.com.br", "sabrina123"));
		
		usuarioService.cadastrarUsuario(new Usuario(0L,"Ricardo Marques", "ricardo_marques@email.com.br", "ricardo123"));

		ResponseEntity<String> resposta = testRestTemplate
			
			.withBasicAuth("root", "root")
			.exchange("/usuarios/all", HttpMethod.GET, null, String.class);
		
		assertEquals(HttpStatus.OK, resposta.getStatusCode());
	}

}
